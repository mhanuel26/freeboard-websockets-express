// ┌────────────────────────────────────────────────────────────────────┐ \\
// │ freeboard-bool-property-RW-plugin AWS                              │ \\
// ├────────────────────────────────────────────────────────────────────┤ \\
// │ The Alexa and Arduino Smart Home Challenge                         │ \\
// | (URL here)                                                         | \\
// ├────────────────────────────────────────────────────────────────────┤ \\
// │ Licensed under the MIT license.                                    │ \\
// ├────────────────────────────────────────────────────────────────────┤ \\
// │ Freeboard widget plugin.                                           │ \\
// └────────────────────────────────────────────────────────────────────┘ \\

(function () {

    freeboard.loadWidgetPlugin({
        type_name: "gaugeWidget",
        display_name: "AWS IoT Gauge",
        "external_scripts" : [
            "plugins/thirdparty/raphael.2.1.0.min.js",
            "plugins/thirdparty/justgage.1.0.1.js"
        ],
        settings: [
            {
                name: "title",
                display_name: "Title",
                type: "text"
            },
            {
                name: "config_data",
                display_name: "Configuration Data",
                type: "calculated"
            },
            {
                name: "property",
                display_name: "Property Name",
                type: "text"
            },
            {
                name: "var_name",
                display_name: "Variable Name",
                type: "text"
            },
            {
                name: "ds_name",
                display_name: "Datasource Name",
                type: "text"
            },            
            {
                name: "topicName",
                display_name: "Topic name",
                type: "text"
            },
            {
                name: "units",
                display_name: "Units",
                type: "text"
            },
            {
                name: "min_value",
                display_name: "Minimum",
                type: "text",
                default_value: 0
            },
            {
                name: "max_value",
                display_name: "Maximum",
                type: "text",
                default_value: 100
            }
        ],
        newInstance: function (settings, newInstanceCallback) {
            newInstanceCallback(new gaugeWidget(settings));
        }
    });


    var gaugeID = 0;
	freeboard.addStyle('.gauge-widget-wrapper', "width: 100%;text-align: center;");
	freeboard.addStyle('.gauge-widget', "width:200px;height:160px;display:inline-block;");

    var gaugeWidget = function (settings) {
        var self = this;

        var thisGaugeID = "gauge-" + gaugeID++;
        var titleElement = $('<h2 class="section-title"></h2>');
        var gaugeElement = $('<div class="gauge-widget" id="' + thisGaugeID + '"></div>');

        var gaugeObject;
        var rendered = false;

        var jsonobj;
        var currentSettings = settings;
        var update_property = true;

		if (!!window.SharedWorker) {
			console.log('Create New Shared Worker - '+thisGaugeID);
			myWorker = new SharedWorker("lib/js/thirdparty/worker.js");

			myWorker.port.onmessage = function(e) {
				var cmd = e.data.split(":");
				switch (cmd[0]){
					case "debug":
						console.log(cmd[1]);
					break;
					case "onconnect":
						//do nothing here
					break;
					case "data":
						var data = String(e.data);
						var response = data.substring('data:'.length);
						console.log("gauge response: "+response);
						var json_obj = JSON.parse(response);
						console.log(json_obj);
						var reported = json_obj["reported"];
						var temperature = reported["temperature"];
						temperature = parseFloat(temperature).toFixed(1);
						if (!_.isUndefined(gaugeObject)) {
							gaugeObject.refresh(temperature);
						}
						if(update_property === true){
							if(json_obj.hasOwnProperty(currentSettings.property)){
								var prop_val = json_obj[currentSettings.property];
								reportThingShadow(currentSettings.property, prop_val);
								update_property = false;
							}
						}
						reportThingShadow(currentSettings.var_name, temperature);
					break;	
				}
			}
		}

        function setGaugeProperty(value){
            var json_obj = new Object();
            var set_property = json_obj["direct-cmd"] = {};	
            set_property[currentSettings.property] = value;
            console.log("setGaugeProperty - send json cmd:");
            console.log(json_obj);
            myWorker.port.postMessage(json_obj);
            // this way we request the report of setpoint once is available
            update_property = true;
        }

        function reportThingShadow(param, value) {
            var json_obj = new Object();
            json_obj.state = {};
            var json_reported = json_obj.state.reported = {};
            json_reported[param] = value;
            var jsonString = JSON.stringify(json_obj);
            console.log("json: " + jsonString);
            var datasource = freeboard.getDatasourceInstance(currentSettings.ds_name);
            datasource.datasourceInstance.publish(currentSettings.topicName, jsonString);
        }

        function createGauge() {
            if (!rendered) {
                return;
            }

            gaugeElement.empty();
            gaugeObject = new JustGage({
                id: thisGaugeID,
                value: (_.isUndefined(currentSettings.min_value) ? 0 : currentSettings.min_value),
                min: (_.isUndefined(currentSettings.min_value) ? 0 : currentSettings.min_value),
                max: (_.isUndefined(currentSettings.max_value) ? 0 : currentSettings.max_value),
                label: currentSettings.units,
                showInnerShadow: false,
                valueFontColor: "#d3d4d4"
            });
        }

        this.render = function (element) {
            rendered = true;
            $(element).append(titleElement).append($('<div class="gauge-widget-wrapper"></div>').append(gaugeElement));
            createGauge();
        }

        this.onSettingsChanged = function (newSettings) {
            if (newSettings.min_value != currentSettings.min_value || newSettings.max_value != currentSettings.max_value || newSettings.units != currentSettings.units) {
                currentSettings = newSettings;
                createGauge();
            }
            else {
                currentSettings = newSettings;
            }

            titleElement.html(newSettings.title);
        }

        this.onCalculatedValueChanged = function (settingName, newValue) {
        	if (settingName == "config_data") {
        		var value;
                jsonobj = newValue;
                if (jsonobj.hasOwnProperty(currentSettings.property)) {
                    value = jsonobj[currentSettings.property];
                    setGaugeProperty(value);
                }   
	        }
        }

        this.onDispose = function () {
        }

        this.getHeight = function () {
            return 3;
        }

        this.onSettingsChanged(settings);
    };

}());

