// ┌────────────────────────────────────────────────────────────────────┐ \\
// │ freeboard-integer-property-RW-plugin                                  │ \\
// ├────────────────────────────────────────────────────────────────────┤ \\
// │ Cypress Analog Coopressor Contest (URL here)                       │ \\
// ├────────────────────────────────────────────────────────────────────┤ \\
// │ Licensed under the MIT license.                                    │ \\
// ├────────────────────────────────────────────────────────────────────┤ \\
// │ Freeboard widget plugin.                                           │ \\
// └────────────────────────────────────────────────────────────────────┘ \\
(function () {
    //
    // DECLARATIONS
    //
    var LOADING_INDICATOR_DELAY = 1000;

    //

    freeboard.loadWidgetPlugin({
        type_name: "integer_rw_property",
        display_name: "Integer Property Control",
        description: "Integer property which can send a value as well as receive",
        settings: [
            {
                name: "title",
                display_name: "Title",
                type: "text"
            },
            {
                name: "config_data",
                display_name: "Configuration Data",
                type: "calculated"
            },
            {
                name: "property",
                display_name: "Property",
                type: "text"
            },
            {
                name: "url",
                display_name: "url",
                type: "calculated"
            },
            {
                name: "integer_property",
                display_name: "Property Name",
                type: "text"
            },
        ],
        newInstance: function (settings, newInstanceCallback) {
            newInstanceCallback(new integer_rw_property(settings));
        }
    });

    freeboard.addStyle('.property-integer', "white-space:normal;width:100%;height:100%");
    freeboard.addStyle('.property-text', "margin-top:10px;");
    var integer_rw_property = function (settings) {
        var self = this;
        var titleElement = $('<h2 class="section-title"></h2>');
        var stateElement = $('<div class="property-text"></div>');
        var propertyElement = $('<div class="property-integer"></div>');
        var currentSettings = settings;
        var propertyValue;
        var jsondata;
        var jsonobj;
        var integerProperty;
        var url;


        function updateState() {
            propertyElement.html(propertyValue);
        }


        this.onClick = function(e) {
            e.preventDefault();

            var new_val = !isOn;
            jsonobj[currentSettings.property] = new_val;
            var new_jsondata = JSON.stringify(jsonobj);
            this.onCalculatedValueChanged('config_data', jsonobj);
            url = currentSettings.url;
            if (_.isUndefined(url))
                freeboard.showDialog($("<div align='center'>url undefined</div>"), "Error!", "OK", null, function () {
                });
            else {
                this.sendValue(url, new_jsondata);
            }
        }


        this.render = function (element) {
            $(element).append(titleElement).append(indicatorElement).append(stateElement);
            stateElement.text((_.isUndefined(integerProperty) ? (_.isUndefined(currentSettings.integer_property) ? "" : currentSettings.integer_property) : integerProperty));
            $(indicatorElement).click(this.onClick.bind(this));
        }

        this.onSettingsChanged = function (newSettings) {
            currentSettings = newSettings;
            titleElement.html((_.isUndefined(newSettings.title) ? "" : newSettings.title));
            updateState();
        }

        this.onCalculatedValueChanged = function (settingName, newValue) {
            if (settingName == "config_data") {
                jsonobj = newValue;
                if (jsonobj.hasOwnProperty(currentSettings.property)) {
                    propertyValue = parseInt(jsonobj[currentSettings.property]);
                    console.log("propertyValue = " + propertyValue);
                }
            }
            if (settingName == "on_text") {
                onText = newValue;
            }
            if (settingName == "off_text") {
                offText = newValue;
            }
            updateState();
        }

        var request;

        this.sendValue = function (url, json_response) {
            console.log(url, json_response);
            request = new XMLHttpRequest();
            if (!request) {
                console.log('Giving up :( Cannot create an XMLHTTP instance');
                return false;
            }
            request.onreadystatechange = this.alertContents;
            request.open('POST', url, true);
            request.setRequestHeader("Content-type", "application/json");
            freeboard.showLoadingIndicator(true);
            request.send(json_response);
        }

        this.alertContents = function () {
            if (request.readyState === XMLHttpRequest.DONE) {
                if (request.status === 200) {
                    console.log(request.responseText);
                    setTimeout(function () {
                        freeboard.showLoadingIndicator(false);
                        //freeboard.showDialog($("<div align='center'>Request response 200</div>"),"Success!","OK",null,function(){});
                    }, LOADING_INDICATOR_DELAY);
                } else {
                    console.log('There was a problem with the request.');
                    setTimeout(function () {
                        freeboard.showLoadingIndicator(false);
                        freeboard.showDialog($("<div align='center'>There was a problem with the request. Code " + request.status + request.responseText + " </div>"), "Error!", "OK", null, function () {
                        });
                    }, LOADING_INDICATOR_DELAY);
                }

            }

        }

        this.onDispose = function () {
        }

        this.getHeight = function () {
            return 1;
        }

        this.onSettingsChanged(settings);
    };

}());