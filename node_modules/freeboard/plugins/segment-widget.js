// ┌────────────────────────────────────────────────────────────────────┐ \\
// │ freeboard-integer-property-RW-plugin                                  │ \\
// ├────────────────────────────────────────────────────────────────────┤ \\
// │ Cypress Analog Coopressor Contest (URL here)                       │ \\
// ├────────────────────────────────────────────────────────────────────┤ \\
// │ Licensed under the MIT license.                                    │ \\
// ├────────────────────────────────────────────────────────────────────┤ \\
// │ Freeboard widget plugin.                                           │ \\
// └────────────────────────────────────────────────────────────────────┘ \\
(function () {
    //
    // DECLARATIONS
    //
    var LOADING_INDICATOR_DELAY = 1000;

    //

    freeboard.loadWidgetPlugin({
        type_name: "segment_display",
        display_name: "Segment Display",
        "external_scripts" : [
            "plugins/thirdparty/segment-display.js"
        ],
        settings: [
            {
                name: "title",
                display_name: "Title",
                type: "text"
            },
            {
                name: "value",
                display_name: "Value",
                type: "calculated"
            },
            {
                name: "units",
                display_name: "Units",
                type: "text"
            },
            {
                name: "min_value",
                display_name: "Minimum",
                type: "text",
                default_value: 0
            },
            {
                name: "max_value",
                display_name: "Maximum",
                type: "text",
                default_value: 100
            }
        ],
        newInstance: function (settings, newInstanceCallback) {
            newInstanceCallback(new segment_display(settings));
        }
    });

    var segmentID = 0;

    // freeboard.addStyle('.segment-widget-wrapper', "width: 100%; height: 126px; text-align: center; position: absolute; z-index: 1; display: inline-block; background: transparent url(plexiglas.png) no-repeat top left");
    freeboard.addStyle('.segment-widget-wrapper', "width: 280px; height: 130px; position: relative; z-index: 1; display: inline-block; background: transparent url(plexiglas.png) no-repeat center");
    // freeboard.addStyle('.segment-canvas', "position: relative; left: 38px; top: 33px; z-index: 20; width: 120px; height: 34px");
    freeboard.addStyle('.segment-canvas', "position: absolute; z-index: 20; width: 120px; height: 34px; padding: 0; margin: auto; display: block; top: 0; bottom: 0; left: 0; right: 0");
    var segment_display = function (settings) {
        var self = this;
        var titleElement = $('<h2 class="section-title"></h2>');
        var thisCanvasID = "canvas-" + segmentID++;
        var segmentCanvas = $('<canvas class="segment-canvas" id="' + thisCanvasID + '"></canvas>');
        var unitsElement = $('<h6 class="section-title" style="text-align: center;"></h6>');
        var segmentObject;
        var rendered = false;

        var currentSettings = settings;

        function createSegment() {
            if (!rendered) {
                return;
            }

            segmentObject = new SegmentDisplay(thisCanvasID);
            segmentObject.pattern         = "###.#";
            segmentObject.cornerType      = 2;
            segmentObject.displayType     = 7;
            segmentObject.displayAngle    = 9;
            segmentObject.digitHeight     = 20;
            segmentObject.digitWidth      = 12;
            segmentObject.digitDistance   = 2;
            segmentObject.segmentWidth    = 3;
            segmentObject.segmentDistance = 0.5;
            segmentObject.colorOn         = "rgba(0, 0, 255, 0.9)";
            segmentObject.colorOff        = "rgba(0, 0, 0, 0.1)";

            segmentObject.setValue('OFF ');

        }

        this.render = function (element) {
            rendered = true;
            $(element).append(titleElement).append($('<div class="segment-widget-wrapper"></div>').append(segmentCanvas));
            $(element).append(unitsElement);
            createSegment();
        }

        this.onSettingsChanged = function (newSettings) {
            if (newSettings.min_value != currentSettings.min_value || newSettings.max_value != currentSettings.max_value || newSettings.units != currentSettings.units) {
                currentSettings = newSettings;
                createSegment();
            }
            else {
                currentSettings = newSettings;
            }
            titleElement.html(newSettings.title);
            unitsElement.html(newSettings.units);
        }

        this.onCalculatedValueChanged = function (settingName, newValue) {
            console.log("onCalculatedValueChanged");
            if (!_.isUndefined(segmentObject)) {
                var intValue = Number(newValue);
                console.log("value = " + intValue);
                var calcValue = self.round(intValue/100, 1).toFixed(1);
                console.log("round = " + calcValue);
                var strValue = calcValue.toString();
                var trailingSpaces = 5-strValue.length;
                for(i=0; i<trailingSpaces; i++){
                    strValue = " " + strValue;
                }
                console.log(strValue);
                segmentObject.setValue(strValue);
            }
        }

        this.onDispose = function () {
        }

        this.getHeight = function () {
            return 3;
        }

        this.round = function(value, precision) {
            var multiplier = Math.pow(10, precision || 0);
            return Math.round(value * multiplier) / multiplier;
        }

        this.onSettingsChanged(settings);
    };

}());