// ┌────────────────────────────────────────────────────────────────────┐ \\
// │ freeboard-integer-property-RW-plugin                                  │ \\
// ├────────────────────────────────────────────────────────────────────┤ \\
// │ Cypress Analog Coopressor Contest (URL here)                       │ \\
// ├────────────────────────────────────────────────────────────────────┤ \\
// │ Licensed under the MIT license.                                    │ \\
// ├────────────────────────────────────────────────────────────────────┤ \\
// │ Freeboard widget plugin.                                           │ \\
// └────────────────────────────────────────────────────────────────────┘ \\
(function () {
    //
    // DECLARATIONS
    //
    var LOADING_INDICATOR_DELAY = 1000;

    //
    freeboard.loadWidgetPlugin({
        type_name: "line_chart",
        display_name: "Line Chart",
        "external_scripts" : [
            "plugins/thirdparty/Chart.min.js"
        ],
        settings: [
            {
                name: "title",
                display_name: "Title",
                type: "text"
            },
            {
                name: "value",
                display_name: "Value",
                type: "calculated"
            },
            {
                name: "units",
                display_name: "Units",
                type: "text"
            },
            {
                name: "min_value",
                display_name: "Minimum",
                type: "text",
                default_value: 0
            },
            {
                name: "max_value",
                display_name: "Maximum",
                type: "text",
                default_value: 100
            }
        ],
        newInstance: function (settings, newInstanceCallback) {
            newInstanceCallback(new line_chart(settings));
        }
    });

    var lineID = 0;
    freeboard.addStyle('.line-chart-widget-wrapper', "width: 100%;text-align: center;");
    freeboard.addStyle('.line-chart-widget', "width:200px;height:160px;display:inline-block;");

    var line_chart = function (settings) {
        var self = this;
        var thisCanvasID = "canvas-" + lineID++;
        var titleElement = $('<h2 class="section-title"></h2>');
        var canvas = $('<canvas class="line-chart-canvas" id="' + thisCanvasID + '"></canvas>');
        var rendered = false;
        var myLiveChart;
        var linecanvas;
        var ctx;
        var lineData;
        var latestLabel;

        var currentSettings = settings;

        function createChart() {
            if (!rendered) {
                return;
            }
            myLiveChart = new Chart(ctx , {
                type: "line",
                data: lineData,
                options: {animationSteps: 15}
            });
        }

        this.render = function (element) {
            rendered = true;
            $(element).append(titleElement).append($('<div class="line-chart-widget-wrapper"></div>').append(canvas));
            linecanvas = document.getElementById(thisCanvasID);
            ctx = linecanvas.getContext('2d');
            lineData = {
                labels: [],
                datasets: [
                    {
                        label: currentSettings.title,
                        backgroundColor: "rgba(255,255,255,0.4)",
                        borderColor: "rgba(255,255,255,1)",
                        borderWidth: 1,
                        fillColor: "rgba(151,187,205,0.2)",
                        strokeColor: "rgba(151,187,205,1)",
                        pointColor: "rgba(151,187,205,1)",
                        pointStrokeColor: "#fff",
                        data: []
                    }
                ]
            };
            latestLabel = 0;
            createChart();
        }

        this.onSettingsChanged = function (newSettings) {
            if (newSettings.min_value != currentSettings.min_value || newSettings.max_value != currentSettings.max_value || newSettings.units != currentSettings.units) {
                currentSettings = newSettings;
                createChart();
            }
            else {
                currentSettings = newSettings;
            }
            titleElement.html(newSettings.title);
        }

        this.onCalculatedValueChanged = function (settingName, newValue) {
            console.log("onCalculatedValueChanged");
            if(settingName == "value"){
                if (!_.isUndefined(myLiveChart)) {
                    var sampleNum = Number(newValue[0]);
                    console.log("sample number = " + sampleNum);
                    var intValue = Number(newValue[1]);
                    console.log("value = " + intValue);
                    var calcValue = self.round(intValue/100, 1).toFixed(1);
                    console.log("round = " + calcValue);
                    // check if sample is in dataset
                    dataLabels = myLiveChart.data.labels;
                    var itemIdx = dataLabels.indexOf(sampleNum);
                    if(itemIdx == -1){      // if not found
                        // Add the new sample to dataset
                        myLiveChart.data.labels.push(sampleNum);
                        myLiveChart.data.datasets[0].data.push(calcValue);
                        myLiveChart.update();
                        if(dataLabels.length > 10){     //remove last value, now hardwired
                            dataLabels.shift();
                            dataArray = myLiveChart.data.datasets[0].data;
                            dataArray.shift();
                            myLiveChart.data.labels = dataLabels;
                            myLiveChart.data.datasets[0].data = dataArray;
                            myLiveChart.update();    
                        }
                    }// else just don't do anything
                }
            }
        }

        this.onDispose = function () {
        }

        this.getHeight = function () {
            return 3;
        }

        this.round = function(value, precision) {
            var multiplier = Math.pow(10, precision || 0);
            return Math.round(value * multiplier) / multiplier;
        }

        this.onSettingsChanged(settings);
    };

}());